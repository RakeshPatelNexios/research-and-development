Code Implementation

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cross-Tab Storage with Cookies</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>

    <h2>Cross-Tab Storage (Normal + Private Window)</h2>

    <button id="addItem">Add Item</button>
    <button id="clearStorage">Clear Storage</button>

    <h3>Stored Items:</h3>
    <ul id="itemList"></ul>

    <script>
        // Function to set cookies
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                let date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + JSON.stringify(value) + "; path=/; SameSite=None; Secure" + expires;
        }

        // Function to get cookies
        function getCookie(name) {
            let cookies = document.cookie.split('; ');
            for (let i = 0; i < cookies.length; i++) {
                let cookie = cookies[i].split('=');
                if (cookie[0] === name) {
                    return JSON.parse(cookie[1] || "[]");
                }
            }
            return [];
        }

        // Function to delete cookies
        function deleteCookie(name) {
            document.cookie = name + "=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC; SameSite=None; Secure";
        }

        // Function to display items in the UI
        function displayItems() {
            let items = getCookie('itemsArray');
            let itemList = $('#itemList');
            itemList.empty();

            items.forEach((item, index) => {
                itemList.append(`<li>(${index + 1}) Name: ${item.name}, Age: ${item.age}</li>`);
            });
        }

        // Function to add an item
        $('#addItem').click(function() {
            let itemsArray = getCookie('itemsArray');

            // Creating a new object
            let newItem = {
                name: "User " + (itemsArray.length + 1),
                age: Math.floor(Math.random() * 50) + 18
            };

            itemsArray.push(newItem);
            setCookie('itemsArray', itemsArray, 7); // Store for 7 days

            displayItems(); // Refresh list
        });

        // Function to clear storage
        $('#clearStorage').click(function() {
            deleteCookie('itemsArray');
            displayItems();
        });

        // Initial display of stored items
        displayItems();
    </script>

</body>
</html>



How This Works:
Stores Data in Cookies Instead of LocalStorage:

setCookie(name, value, days) ‚Üí Saves the data for a specified number of days.
getCookie(name) ‚Üí Retrieves the stored data from cookies.
deleteCookie(name) ‚Üí Deletes the stored data when needed.
Ensures Accessibility Across Normal and Private Windows:

Since cookies are shared across normal & private tabs, they remain accessible in both modes.
Data will persist until the expiration time or until the user clears cookies.
Syncs Data Between Multiple Tabs:

Every tab (normal or private) reads from the same cookies, keeping data synchronized.
Works even if private mode blocks LocalStorage.


Why Cookies Instead of LocalStorage?

Feature - 1 : Shared between normal & private windows
LocalStorage ‚ùå : No
Cookies ‚úÖ : Yes

Feature - 2 : Persists after page reload
LocalStorage ‚úÖ : Yes
Cookies ‚úÖ : Yes

Feature - 3 : Works in Private Mode
LocalStorage ‚ùå : No
Cookies ‚úÖ : Yes

Feature - 4 : Expiry time control
LocalStorage ‚ùå : No
Cookies ‚úÖ : Yes (Set expiry)

Feature - 5 : Auto-sync across tabs
LocalStorage ‚ùå : No
Cookies ‚úÖ : Yes (Set expiry)


Limitations of Cookies
  - Limited Storage Size (~4KB per cookie) ‚Üí If storing large data, split into multiple cookies.
  - Slightly Slower than LocalStorage due to server transmission (if running on a backend).

Final Thoughts
‚úÖ This solution works perfectly across normal and private tabs.
‚úÖ Data remains persistent until manually cleared or expires.
‚úÖ No need for third-party services like Firebase.

üöÄ Now, you can store data across tabs and browser modes seamlessly! Let me know if you need improvements. üòä
